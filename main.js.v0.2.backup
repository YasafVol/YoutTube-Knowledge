/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => YoutubeKnowledgePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/ui/RibbonButton.ts
var import_obsidian2 = require("obsidian");

// src/ui/TranscriptModal.ts
var import_obsidian = require("obsidian");
var TranscriptModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.url = "";
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "YouTube transcript" });
    const submitUrl = () => {
      if (!this.url) {
        new import_obsidian.Notice("Please enter a YouTube URL");
        return;
      }
      try {
        this.onSubmit(this.url);
        this.close();
      } catch (error) {
        new import_obsidian.Notice("Failed to process URL: " + error.message);
      }
    };
    new import_obsidian.Setting(contentEl).setName("YouTube URL").setDesc("Enter a YouTube video link").addText(
      (text) => text.setPlaceholder("https://www.youtube.com/watch?v=...").onChange((value) => {
        this.url = value;
      }).inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          submitUrl();
        }
      })
    );
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Get transcript").setCta().onClick(submitUrl)
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/RibbonButton.ts
var RibbonButton = class {
  constructor(app, plugin, onTranscriptUrlSubmit) {
    this.app = app;
    this.plugin = plugin;
    this.onTranscriptUrlSubmit = onTranscriptUrlSubmit;
    this.initialize();
  }
  initialize() {
    this.ribbonIcon = this.plugin.addRibbonIcon(
      "message-square-share",
      "Open transcript",
      (evt) => {
        this.handleClick();
      }
    );
    (0, import_obsidian2.setIcon)(this.ribbonIcon, "message-square-share");
  }
  handleClick() {
    const modal = new TranscriptModal(this.app, this.onTranscriptUrlSubmit);
    modal.open();
  }
  // Public method to programmatically trigger the click action
  click() {
    this.handleClick();
  }
  // Method to update button visibility if needed
  setVisibility(visible) {
    if (visible) {
      this.ribbonIcon.classList.remove("youtube-knowledge-ribbon-hidden");
    } else {
      this.ribbonIcon.classList.add("youtube-knowledge-ribbon-hidden");
    }
  }
  // Cleanup method to be called when plugin is disabled
  cleanup() {
    var _a;
    (_a = this.ribbonIcon) == null ? void 0 : _a.remove();
  }
};

// src/services/URLProcessor.ts
var import_obsidian4 = require("obsidian");

// src/services/YouTubeService.ts
var import_obsidian3 = require("obsidian");

// src/utils/debug.ts
var DebugLogger = class {
  constructor(plugin) {
    this.prefix = "[YouTube Knowledge]";
    this.plugin = plugin;
  }
  log(message, data) {
    if (this.plugin.settings.debugMode) {
      const timestamp = new Date().toISOString();
      console.log(`${this.prefix} [${timestamp}] ${message}`, data || "");
    }
  }
  warn(message, data) {
    if (this.plugin.settings.debugMode) {
      const timestamp = new Date().toISOString();
      console.warn(`${this.prefix} [${timestamp}] ${message}`, data || "");
    }
  }
  error(message, error) {
    if (this.plugin.settings.debugMode) {
      const timestamp = new Date().toISOString();
      console.error(`${this.prefix} [${timestamp}] ${message}`, error || "");
    }
  }
};

// src/services/YouTubeService.ts
var YouTubeService = class {
  constructor(plugin) {
    this.INTERVAL_SECONDS = 30;
    this.logger = new DebugLogger(plugin);
    this.settings = plugin.settings;
  }
  /**
   * Fetches transcript from YouTube and processes it into 30-second intervals
   * @param cleanURL - The validated YouTube URL
   * @returns Formatted transcript text
   */
  async fetchTranscript(cleanURL) {
    try {
      this.logger.log("Fetching transcript for URL:", cleanURL);
      const response = await this.getTranscriptData(cleanURL);
      const formattedTranscript = this.formatTranscript(response.lines);
      this.logger.log("Successfully fetched transcript:", {
        title: response.title,
        transcript: formattedTranscript
      });
      return formattedTranscript;
    } catch (error) {
      const errorMessage = `Failed to fetch transcript: ${error.message}`;
      this.logger.error("Error:", errorMessage);
      throw new Error(errorMessage);
    }
  }
  async getTranscriptData(url) {
    var _a, _b, _c, _d;
    const videoPageBody = await (0, import_obsidian3.request)(url);
    const parser = new DOMParser();
    const doc = parser.parseFromString(videoPageBody, "text/html");
    const scripts = Array.from(doc.getElementsByTagName("script"));
    const playerScript = scripts.find(
      (script) => {
        var _a2;
        return (_a2 = script.textContent) == null ? void 0 : _a2.includes("var ytInitialPlayerResponse = {");
      }
    );
    if (!(playerScript == null ? void 0 : playerScript.textContent)) {
      this.logger.error("Could not find YouTube player data");
      throw new Error("Could not find YouTube player data");
    }
    const dataString = ((_a = playerScript.textContent.split("var ytInitialPlayerResponse = ")[1]) == null ? void 0 : _a.split("};")[0]) + "}";
    const data = JSON.parse(dataString.trim());
    const captionTracks = ((_c = (_b = data == null ? void 0 : data.captions) == null ? void 0 : _b.playerCaptionsTracklistRenderer) == null ? void 0 : _c.captionTracks) || [];
    this.logger.log("Available caption tracks:", captionTracks);
    const preferredLanguage = this.settings.youtube.language;
    const preferredTrack = captionTracks.find(
      (track) => track.languageCode.includes(preferredLanguage)
    );
    const selectedTrack = (_d = preferredTrack != null ? preferredTrack : captionTracks.find(
      (track) => track.languageCode.includes("en")
    )) != null ? _d : captionTracks[0];
    if (!selectedTrack) {
      this.logger.error("No captions available");
      throw new Error(`No captions available in ${preferredLanguage} or English`);
    }
    this.logger.log("Selected caption track:", selectedTrack);
    const captionsUrl = selectedTrack.baseUrl.startsWith("https://") ? selectedTrack.baseUrl : "https://www.youtube.com" + selectedTrack.baseUrl;
    const captionsResponse = await (0, import_obsidian3.request)(captionsUrl);
    const captionsDoc = parser.parseFromString(captionsResponse, "text/xml");
    const textElements = captionsDoc.getElementsByTagName("text");
    const title = this.extractTitle(doc);
    this.logger.log("Extracted video title:", title);
    return {
      title,
      lines: Array.from(textElements).map(this.parseTranscriptLine)
    };
  }
  extractTitle(doc) {
    const titleMeta = doc.querySelector('meta[name="title"]');
    return (titleMeta == null ? void 0 : titleMeta.getAttribute("content")) || "";
  }
  parseTranscriptLine(element) {
    const text = (element.textContent || "").replace(/&#39;/g, "'").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    return {
      text,
      duration: parseFloat(element.getAttribute("dur") || "0") * 1e3,
      offset: parseFloat(element.getAttribute("start") || "0") * 1e3
    };
  }
  formatTranscript(lines) {
    const intervals = {};
    lines.forEach((line) => {
      const intervalIndex = Math.floor(line.offset / (this.INTERVAL_SECONDS * 1e3));
      if (!intervals[intervalIndex]) {
        intervals[intervalIndex] = [];
      }
      intervals[intervalIndex].push(line.text);
    });
    return Object.entries(intervals).map(([interval, texts]) => {
      const timestamp = this.formatTimestamp(parseInt(interval) * this.INTERVAL_SECONDS);
      return `[${timestamp}]
${texts.join(" ")}
`;
    }).join("\n");
  }
  formatTimestamp(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
  }
};

// src/services/URLProcessor.ts
var URLProcessor = class {
  /**
   * Processes and validates a YouTube URL
   * @param dirtyURL - The raw URL input from the user
   * @param app - The Obsidian App instance
   * @param settings - The plugin settings
   * @returns ProcessedURLData containing clean URL, title, and transcript
   * @throws Error if URL is invalid
   */
  static async processURL(dirtyURL, app, settings) {
    try {
      if (!dirtyURL) {
        throw new Error("URL cannot be empty");
      }
      let cleanURL = dirtyURL.trim();
      const videoId = URLProcessor.extractVideoId(cleanURL);
      if (!videoId) {
        throw new Error("Invalid YouTube URL format. Please provide a valid YouTube video URL.");
      }
      cleanURL = `https://www.youtube.com/watch?v=${videoId}`;
      const response = await (0, import_obsidian4.request)(cleanURL);
      const parser = new DOMParser();
      const doc = parser.parseFromString(response, "text/html");
      const titleMeta = doc.querySelector('meta[name="title"]');
      const title = (titleMeta == null ? void 0 : titleMeta.getAttribute("content")) || "Untitled Video";
      const tempPlugin = {
        settings,
        manifest: {},
        app
      };
      const youtubeService = new YouTubeService(tempPlugin);
      const transcript = await youtubeService.fetchTranscript(cleanURL);
      return {
        cleanURL,
        title,
        transcript
      };
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`URL Processing failed: ${error.message}`);
      } else {
        throw new Error("URL Processing failed: Unknown error occurred");
      }
    }
  }
  /**
   * Extracts the video ID from various YouTube URL formats
   * @param url - The YouTube URL
   * @returns The video ID or null if invalid
   */
  static extractVideoId(url) {
    const patterns = [
      // Standard YouTube URL
      /(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
      // YouTube Shorts
      /youtube\.com\/shorts\/([a-zA-Z0-9_-]{11})/,
      // Embedded URL
      /youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
      // Mobile URL
      /youtube\.com\/v\/([a-zA-Z0-9_-]{11})/
    ];
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }
    return null;
  }
};

// src/types/settings.ts
var DEFAULT_SETTINGS = {
  youtube: {
    language: "en",
    timeframeSeconds: 60,
    clippingsFolder: "YouTube Clippings"
  },
  llm: {
    anthropicKey: "",
    model: "claude-3-5-sonnet-latest",
    temperature: 0.5,
    // Balanced between creativity and focus
    maxTokens: 4e3,
    // Good for detailed summaries
    topP: 1,
    // Consider full token distribution
    topK: 40
    // Balanced vocabulary diversity
  },
  debugMode: false
};
var MODEL_OPTIONS = {
  "Claude 3.5 Sonnet": "claude-3-5-sonnet-latest",
  "Claude 3.5 Haiku": "claude-3-5-haiku-latest",
  "Claude 3 Opus": "claude-3-opus-latest",
  "Claude 3 Sonnet": "claude-3-sonnet-20240229",
  "Claude 3 Haiku": "claude-3-haiku-20240307"
};

// src/services/FileService.ts
var FileService = class {
  constructor(app, settingsStore) {
    this.app = app;
    this.settingsStore = settingsStore;
  }
  /**
   * Creates a new file in the vault
   * @param path The path where the file should be created
   * @param content The content to write to the file
   * @returns Promise<TFile> The created file
   */
  async createFile(path, content) {
    try {
      const uniquePath = await this.getUniqueFilePath(path);
      const file = await this.app.vault.create(uniquePath, content);
      return file;
    } catch (error) {
      throw new Error(`Failed to create file: ${error.message}`);
    }
  }
  /**
   * Creates a new file for a YouTube video
   * @param title The video title
   * @param url The video URL
   * @param transcript Optional video transcript
   * @returns Promise<TFile> The created file
   */
  async createYouTubeVideoFile(title, url, transcript) {
    var _a;
    const safeTitle = title.replace(/[\\/:*?"<>|]/g, "").trim();
    const currentDate = new Date().toISOString().split("T")[0];
    const settings = this.settingsStore.getSettings();
    const folderPath = ((_a = settings == null ? void 0 : settings.youtube) == null ? void 0 : _a.clippingsFolder) || DEFAULT_SETTINGS.youtube.clippingsFolder;
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
    return await this.createFile(
      `${folderPath}/${safeTitle}.md`,
      `---
url: ${url}
created: ${currentDate}
---

${transcript || ""}`
    );
  }
  /**
   * Gets a unique file path by appending a number if the file already exists
   * @param basePath The initial desired path
   * @returns Promise<string> A unique file path
   */
  async getUniqueFilePath(basePath) {
    let counter = 1;
    let uniquePath = basePath;
    while (await this.app.vault.adapter.exists(uniquePath)) {
      const ext = basePath.includes(".") ? basePath.split(".").pop() : "";
      const baseWithoutExt = basePath.includes(".") ? basePath.slice(0, basePath.lastIndexOf(".")) : basePath;
      uniquePath = `${baseWithoutExt} ${counter}.${ext}`;
      counter++;
    }
    return uniquePath;
  }
};

// src/services/TLDRService.ts
var import_obsidian5 = require("obsidian");

// src/prompts/default_prompt.ts
var DEFAULT_PROMPT = `Please provide a comprehensive analysis of this YouTube video transcript. Structure your response as follows:

---
tags: #KeyTopics #MainThemes #VideoAnalysis
---

# Summary
- Main topics and key points
- Important details and examples
- Key conclusions or takeaways

# Sources & References
- Books, articles, papers cited (with timestamps if available)
- Experts or authorities quoted
- Websites or resources mentioned
- Tools or technologies discussed

# Additional Context
- Methodological notes or limitations mentioned
- Related content suggestions
- Important timestamps for key moments

Note: If no sources/references are explicitly mentioned, focus on providing a thorough summary of the main content.`;

// src/services/TLDRService.ts
var TLDRService = class {
  constructor(settingsStore, fileService, plugin) {
    this.settingsStore = settingsStore;
    this.fileService = fileService;
    this.logger = new DebugLogger(plugin);
  }
  /**
   * Processes a file to create a TLDR summary
   * @param file The file to process
   * @throws Error if file is invalid, settings are missing, or API fails
   */
  async processFile(file) {
    try {
      if (!(file instanceof import_obsidian5.TFile)) {
        this.logger.error("Invalid file object provided:", file);
        throw new Error("Invalid file object: Expected TFile instance");
      }
      this.logger.log("Starting TLDR generation for file:", file.path);
      new import_obsidian5.Notice("\u{1F916} Starting TLDR generation...");
      const settings = this.settingsStore.getLLMSettings();
      if (!settings.anthropicKey) {
        this.logger.error("Anthropic API key not configured");
        throw new Error("Anthropic API key is not configured");
      }
      const content = await file.vault.read(file);
      if (!content.trim()) {
        this.logger.error("Empty file content for:", file.path);
        throw new Error("File is empty");
      }
      this.logger.log("File content loaded, calling Anthropic API");
      const { summary, cost } = await this.callAnthropicAPI(content, settings.anthropicKey, settings.model);
      const summaryPath = `${file.path.replace(".md", "")}-summary.md`;
      this.logger.log("Creating summary file at:", summaryPath);
      const currentDate = new Date().toISOString().split("T")[0];
      const summaryContent = `---
parent: [[${file.basename}]]
created: ${currentDate}
cost: ${cost}
---

# Summary of ${file.basename}

${summary}`;
      await this.fileService.createFile(summaryPath, summaryContent);
      this.logger.log("Summary created successfully", { path: summaryPath, cost });
      new import_obsidian5.Notice(`\u2705 Summary created successfully (Cost: $${cost.toFixed(4)})`);
    } catch (error) {
      if (error instanceof Error) {
        this.logger.error("Failed to create summary:", error);
        new import_obsidian5.Notice(`\u274C Failed to create summary: ${error.message}`);
        throw error;
      }
      this.logger.error("Unknown error occurred");
      throw new Error("An unknown error occurred");
    }
  }
  /**
   * Calls the Anthropic API to generate a summary
   * @param content The content to summarize
   * @param apiKey The Anthropic API key
   * @param model The model to use
   * @returns The generated summary and estimated cost
   * @throws Error if API call fails
   */
  async callAnthropicAPI(content, apiKey, model) {
    var _a, _b;
    try {
      this.logger.log("Calling Anthropic API with model:", model);
      const response = await (0, import_obsidian5.requestUrl)({
        url: "https://api.anthropic.com/v1/messages",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": apiKey,
          "anthropic-version": "2023-06-01"
        },
        body: JSON.stringify({
          model,
          max_tokens: 4e3,
          messages: [{
            role: "user",
            content: `${DEFAULT_PROMPT}

Content to summarize:
${content}`
          }],
          temperature: 0.5
        })
      });
      if (response.status !== 200) {
        const errorData = response.json;
        this.logger.error("API error response:", errorData);
        throw new Error(`API error: ${errorData.error.message}`);
      }
      const data = response.json;
      let inputRate = 15e-6;
      let outputRate = 75e-6;
      if (model.includes("haiku")) {
        inputRate = 3e-6;
        outputRate = 15e-6;
      }
      const inputTokens = ((_a = data.usage) == null ? void 0 : _a.input_tokens) || 0;
      const outputTokens = ((_b = data.usage) == null ? void 0 : _b.output_tokens) || 0;
      const cost = inputTokens * inputRate + outputTokens * outputRate;
      this.logger.log("API call successful", {
        model,
        inputTokens,
        outputTokens,
        cost
      });
      return {
        summary: data.content[0].text.trim(),
        cost
      };
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes("rate")) {
          this.logger.error("Rate limit exceeded");
          throw new Error("Rate limit exceeded. Please try again later.");
        }
        this.logger.error("API call failed:", error);
        throw error;
      }
      this.logger.error("Failed to connect to Anthropic API");
      throw new Error("Failed to connect to Anthropic API");
    }
  }
};

// src/ui/SettingsTab.ts
var import_obsidian7 = require("obsidian");

// src/ui/settings/components/GeneralSettings.ts
var import_obsidian6 = require("obsidian");
var GeneralSettings = class {
  constructor(containerEl, settingsStore) {
    this.settingsStore = settingsStore;
    const settings = settingsStore.getSettings();
    new import_obsidian6.Setting(containerEl).setName("Language").setDesc("Select the language for YouTube operations").addDropdown((dropdown) => {
      dropdown.addOption("en", "English").addOption("es", "Spanish").addOption("fr", "French").addOption("de", "German").addOption("it", "Italian").addOption("pt", "Portuguese").addOption("ru", "Russian").addOption("ja", "Japanese").addOption("ko", "Korean").addOption("zh", "Chinese").setValue(settings.youtube.language).onChange(async (value) => {
        await settingsStore.updateYouTubeSettings(
          value,
          settings.youtube.timeframeSeconds,
          settings.youtube.clippingsFolder
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Timeframe").setDesc("Set the timeframe in seconds for processing").addText(
      (text) => text.setPlaceholder("60").setValue(settings.youtube.timeframeSeconds.toString()).onChange(async (value) => {
        const timeframe = parseInt(value, 10);
        if (!isNaN(timeframe) && timeframe > 0) {
          await settingsStore.updateYouTubeSettings(
            settings.youtube.language,
            timeframe,
            settings.youtube.clippingsFolder
          );
        }
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Clippings Folder").setDesc("Set the folder path for storing YouTube clippings").addText(
      (text) => text.setPlaceholder("YouTube Clippings").setValue(settings.youtube.clippingsFolder).onChange(async (value) => {
        if (value.trim()) {
          await settingsStore.updateYouTubeSettings(
            settings.youtube.language,
            settings.youtube.timeframeSeconds,
            value.trim()
          );
        }
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Debug mode").setDesc("Enable detailed console logging for troubleshooting").addToggle(
      (toggle) => toggle.setValue(settings.debugMode).onChange(async (value) => {
        await settingsStore.updateDebugMode(value);
      })
    );
    containerEl.createEl("h3", { text: "AI Model Settings" });
    new import_obsidian6.Setting(containerEl).setName("Anthropic API Key").setDesc("Enter your Anthropic API key for Claude access").addText((text) => {
      const input = text.setPlaceholder("Enter your API key").setValue(settings.llm.anthropicKey).onChange(async (value) => {
        await settingsStore.updateLLMSettings(
          value,
          void 0,
          void 0,
          void 0,
          void 0,
          void 0
        );
      });
      const inputEl = input.inputEl;
      inputEl.type = "password";
      return input;
    });
    new import_obsidian6.Setting(containerEl).setName("Model").setDesc("Select the Claude model to use for summaries").addDropdown((dropdown) => {
      Object.entries(MODEL_OPTIONS).forEach(([name, value]) => {
        dropdown.addOption(value, name);
      });
      dropdown.setValue(settings.llm.model).onChange(async (value) => {
        await settingsStore.updateLLMSettings(
          void 0,
          value,
          void 0,
          void 0,
          void 0,
          void 0
        );
      });
    });
    const promptSetting = new import_obsidian6.Setting(containerEl).setName("Model Prompt").setDesc("The default prompt used for generating summaries");
    const promptTextArea = document.createElement("textarea");
    promptTextArea.value = DEFAULT_PROMPT;
    promptTextArea.rows = 10;
    promptTextArea.style.width = "100%";
    promptTextArea.style.marginTop = "10px";
    promptTextArea.readOnly = true;
    promptTextArea.style.backgroundColor = "var(--background-secondary)";
    promptTextArea.style.cursor = "default";
    promptSetting.settingEl.appendChild(promptTextArea);
    new import_obsidian6.Setting(containerEl).setName("Temperature").setDesc("Controls randomness in the output. Lower values (0.0) are more focused, higher values (1.0) are more creative.").addSlider((slider) => {
      slider.setLimits(0, 1, 0.1).setValue(settings.llm.temperature).setDynamicTooltip().onChange(async (value) => {
        await settingsStore.updateLLMSettings(
          void 0,
          void 0,
          value,
          void 0,
          void 0,
          void 0
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Max Tokens").setDesc("Maximum length of the generated summary. Higher values allow longer responses.").addText((text) => {
      text.setPlaceholder("4000").setValue(settings.llm.maxTokens.toString()).onChange(async (value) => {
        const tokens = parseInt(value, 10);
        if (!isNaN(tokens) && tokens > 0) {
          await settingsStore.updateLLMSettings(
            void 0,
            void 0,
            void 0,
            tokens,
            void 0,
            void 0
          );
        }
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Top P").setDesc("Controls diversity by limiting cumulative probability of considered tokens. Lower values (0.1) focus on likely tokens, higher values (1.0) allow more diversity.").addSlider((slider) => {
      slider.setLimits(0, 1, 0.1).setValue(settings.llm.topP).setDynamicTooltip().onChange(async (value) => {
        await settingsStore.updateLLMSettings(
          void 0,
          void 0,
          void 0,
          void 0,
          value,
          void 0
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Top K").setDesc("Number of highest probability tokens to consider. Lower values (10) give more focused word choice, higher values (100) allow more diverse vocabulary.").addSlider((slider) => {
      slider.setLimits(1, 100, 1).setValue(settings.llm.topK).setDynamicTooltip().onChange(async (value) => {
        await settingsStore.updateLLMSettings(
          void 0,
          void 0,
          void 0,
          void 0,
          void 0,
          value
        );
      });
    });
  }
};

// src/ui/SettingsTab.ts
var SettingsTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new GeneralSettings(containerEl, this.plugin.settingsStore);
  }
};

// src/store/SettingsStore.ts
var SettingsStore = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.settings = DEFAULT_SETTINGS;
  }
  /**
   * Loads settings from Obsidian's data storage
   */
  async loadSettings() {
    try {
      const loadedData = await this.plugin.loadData();
      this.settings = {
        ...DEFAULT_SETTINGS,
        ...loadedData
      };
    } catch (error) {
      console.error("Failed to load settings:", error);
      throw new Error("Failed to load settings. Using defaults.");
    }
  }
  /**
   * Saves current settings to Obsidian's data storage
   */
  async saveSettings() {
    try {
      await this.plugin.saveData(this.settings);
    } catch (error) {
      console.error("Failed to save settings:", error);
      throw new Error("Failed to save settings.");
    }
  }
  /**
   * Updates settings with new values and saves them
   * @param newSettings - Partial settings object to merge with current settings
   */
  async updateSettings(newSettings) {
    try {
      this.settings = {
        ...this.settings,
        ...newSettings
      };
      await this.saveSettings();
    } catch (error) {
      console.error("Failed to update settings:", error);
      throw new Error("Failed to update settings.");
    }
  }
  /**
   * Gets the current settings
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Gets YouTube-specific settings
   */
  getYouTubeSettings() {
    return this.settings.youtube;
  }
  /**
   * Gets LLM-specific settings
   */
  getLLMSettings() {
    return this.settings.llm;
  }
  /**
   * Updates YouTube settings
   * @param language - Selected language
   * @param timeframeSeconds - Timeframe in seconds
   * @param clippingsFolder - Path to store YouTube clippings
   */
  async updateYouTubeSettings(language, timeframeSeconds, clippingsFolder) {
    if (timeframeSeconds <= 0) {
      throw new Error("Timeframe must be greater than 0 seconds");
    }
    await this.updateSettings({
      youtube: {
        ...this.settings.youtube,
        language,
        timeframeSeconds,
        ...clippingsFolder && { clippingsFolder }
      }
    });
  }
  /**
   * Updates LLM settings
   * @param anthropicKey - Anthropic API key
   * @param model - Anthropic model selection
   * @param temperature - Controls randomness (0.0 to 1.0)
   * @param maxTokens - Maximum length of generated text
   * @param topP - Nucleus sampling threshold (0.0 to 1.0)
   * @param topK - Number of tokens to consider
   */
  async updateLLMSettings(anthropicKey, model, temperature, maxTokens, topP, topK) {
    if (anthropicKey === "") {
      throw new Error("Anthropic API key is required");
    }
    const newSettings = {
      ...this.settings.llm,
      ...anthropicKey !== void 0 && { anthropicKey },
      ...model !== void 0 && { model },
      ...temperature !== void 0 && { temperature },
      ...maxTokens !== void 0 && { maxTokens },
      ...topP !== void 0 && { topP },
      ...topK !== void 0 && { topK }
    };
    if (temperature !== void 0 && (temperature < 0 || temperature > 1)) {
      throw new Error("Temperature must be between 0 and 1");
    }
    if (maxTokens !== void 0 && maxTokens <= 0) {
      throw new Error("Max tokens must be greater than 0");
    }
    if (topP !== void 0 && (topP < 0 || topP > 1)) {
      throw new Error("Top P must be between 0 and 1");
    }
    if (topK !== void 0 && topK <= 0) {
      throw new Error("Top K must be greater than 0");
    }
    await this.updateSettings({
      llm: newSettings
    });
  }
  /**
   * Updates debug mode setting
   * @param enabled - Whether debug mode should be enabled
   */
  async updateDebugMode(enabled) {
    await this.updateSettings({
      debugMode: enabled
    });
  }
};

// main.ts
var YoutubeKnowledgePlugin = class extends import_obsidian8.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
  }
  async onload() {
    this.settingsStore = new SettingsStore(this);
    await this.settingsStore.loadSettings();
    this.settings = this.settingsStore.getSettings();
    this.fileService = new FileService(this.app, this.settingsStore);
    this.tldrService = new TLDRService(this.settingsStore, this.fileService, this);
    this.ribbonButton = new RibbonButton(
      this.app,
      this,
      async (dirtyURL) => {
        await this.processYouTubeURL(dirtyURL);
      }
    );
    this.addCommand({
      id: "open-youtube-transcript",
      name: "Open YouTube transcript",
      hotkeys: [],
      callback: () => {
        this.ribbonButton.click();
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  async processYouTubeURL(dirtyURL) {
    new import_obsidian8.Notice(`Processing URL: ${dirtyURL}`);
    try {
      const processedData = await URLProcessor.processURL(dirtyURL, this.app, this.settings);
      new import_obsidian8.Notice(`Clean URL: ${processedData.cleanURL}`);
      const file = await this.fileService.createYouTubeVideoFile(
        processedData.title,
        processedData.cleanURL,
        processedData.transcript
      );
      await this.tldrService.processFile(file);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
      new import_obsidian8.Notice(`Error: ${errorMessage}`);
      console.error("Processing error:", errorMessage);
    }
  }
  async onunload() {
    var _a;
    (_a = this.ribbonButton) == null ? void 0 : _a.cleanup();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvdWkvUmliYm9uQnV0dG9uLnRzIiwgInNyYy91aS9UcmFuc2NyaXB0TW9kYWwudHMiLCAic3JjL3NlcnZpY2VzL1VSTFByb2Nlc3Nvci50cyIsICJzcmMvc2VydmljZXMvWW91VHViZVNlcnZpY2UudHMiLCAic3JjL3V0aWxzL2RlYnVnLnRzIiwgInNyYy90eXBlcy9zZXR0aW5ncy50cyIsICJzcmMvc2VydmljZXMvRmlsZVNlcnZpY2UudHMiLCAic3JjL3NlcnZpY2VzL1RMRFJTZXJ2aWNlLnRzIiwgInNyYy9wcm9tcHRzL2RlZmF1bHRfcHJvbXB0LnRzIiwgInNyYy91aS9TZXR0aW5nc1RhYi50cyIsICJzcmMvdWkvc2V0dGluZ3MvY29tcG9uZW50cy9HZW5lcmFsU2V0dGluZ3MudHMiLCAic3JjL3N0b3JlL1NldHRpbmdzU3RvcmUudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE5vdGljZSwgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBSaWJib25CdXR0b24gfSBmcm9tICcuL3NyYy91aS9SaWJib25CdXR0b24nO1xyXG5pbXBvcnQgeyBVUkxQcm9jZXNzb3IgfSBmcm9tICcuL3NyYy9zZXJ2aWNlcy9VUkxQcm9jZXNzb3InO1xyXG5pbXBvcnQgeyBGaWxlU2VydmljZSB9IGZyb20gJy4vc3JjL3NlcnZpY2VzL0ZpbGVTZXJ2aWNlJztcclxuaW1wb3J0IHsgVExEUlNlcnZpY2UgfSBmcm9tICcuL3NyYy9zZXJ2aWNlcy9UTERSU2VydmljZSc7XHJcbmltcG9ydCB7IFNldHRpbmdzVGFiIH0gZnJvbSAnLi9zcmMvdWkvU2V0dGluZ3NUYWInO1xyXG5pbXBvcnQgeyBTZXR0aW5nc1N0b3JlIH0gZnJvbSAnLi9zcmMvc3RvcmUvU2V0dGluZ3NTdG9yZSc7XHJcbmltcG9ydCB7IFNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9zcmMvdHlwZXMvc2V0dGluZ3MnO1xyXG5pbXBvcnQgJy4vc3R5bGVzLmNzcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBZb3V0dWJlS25vd2xlZGdlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHByaXZhdGUgcmliYm9uQnV0dG9uOiBSaWJib25CdXR0b247XHJcbiAgICBwcml2YXRlIGZpbGVTZXJ2aWNlOiBGaWxlU2VydmljZTtcclxuICAgIHByaXZhdGUgdGxkclNlcnZpY2U6IFRMRFJTZXJ2aWNlO1xyXG4gICAgc2V0dGluZ3NTdG9yZTogU2V0dGluZ3NTdG9yZTtcclxuICAgIHNldHRpbmdzOiBTZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1M7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NTdG9yZSA9IG5ldyBTZXR0aW5nc1N0b3JlKHRoaXMpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0dGluZ3NTdG9yZS5sb2FkU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gdGhpcy5zZXR0aW5nc1N0b3JlLmdldFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsZVNlcnZpY2UgPSBuZXcgRmlsZVNlcnZpY2UodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3NTdG9yZSk7XHJcbiAgICAgICAgdGhpcy50bGRyU2VydmljZSA9IG5ldyBUTERSU2VydmljZSh0aGlzLnNldHRpbmdzU3RvcmUsIHRoaXMuZmlsZVNlcnZpY2UsIHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnJpYmJvbkJ1dHRvbiA9IG5ldyBSaWJib25CdXR0b24oXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICBhc3luYyAoZGlydHlVUkw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzWW91VHViZVVSTChkaXJ0eVVSTCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ29wZW4teW91dHViZS10cmFuc2NyaXB0JyxcclxuICAgICAgICAgICAgbmFtZTogJ09wZW4gWW91VHViZSB0cmFuc2NyaXB0JyxcclxuICAgICAgICAgICAgaG90a2V5czogW10sXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpYmJvbkJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHByb2Nlc3NZb3VUdWJlVVJMKGRpcnR5VVJMOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBuZXcgTm90aWNlKGBQcm9jZXNzaW5nIFVSTDogJHtkaXJ0eVVSTH1gKTtcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzZWREYXRhID0gYXdhaXQgVVJMUHJvY2Vzc29yLnByb2Nlc3NVUkwoZGlydHlVUkwsIHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgQ2xlYW4gVVJMOiAke3Byb2Nlc3NlZERhdGEuY2xlYW5VUkx9YCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5maWxlU2VydmljZS5jcmVhdGVZb3VUdWJlVmlkZW9GaWxlKFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YS50aXRsZSxcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NlZERhdGEuY2xlYW5VUkwsXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWREYXRhLnRyYW5zY3JpcHRcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudGxkclNlcnZpY2UucHJvY2Vzc0ZpbGUoZmlsZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvck1lc3NhZ2V9YCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2Nlc3NpbmcgZXJyb3I6JywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5yaWJib25CdXR0b24/LmNsZWFudXAoKTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIHNldEljb24gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFRyYW5zY3JpcHRNb2RhbCB9IGZyb20gJy4vVHJhbnNjcmlwdE1vZGFsJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSaWJib25CdXR0b24ge1xyXG4gICAgcHJpdmF0ZSByaWJib25JY29uOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwcDogQXBwLFxyXG4gICAgICAgIHByaXZhdGUgcGx1Z2luOiBQbHVnaW4sXHJcbiAgICAgICAgcHJpdmF0ZSBvblRyYW5zY3JpcHRVcmxTdWJtaXQ6ICh1cmw6IHN0cmluZykgPT4gdm9pZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEFkZCByaWJib24gaWNvblxyXG4gICAgICAgIHRoaXMucmliYm9uSWNvbiA9IHRoaXMucGx1Z2luLmFkZFJpYmJvbkljb24oXHJcbiAgICAgICAgICAgICdtZXNzYWdlLXNxdWFyZS1zaGFyZScsXHJcbiAgICAgICAgICAgICdPcGVuIHRyYW5zY3JpcHQnLFxyXG4gICAgICAgICAgICAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgY2xpY2sgZXZlbnRcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xpY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaWNvbiB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmdcclxuICAgICAgICBzZXRJY29uKHRoaXMucmliYm9uSWNvbiwgJ21lc3NhZ2Utc3F1YXJlLXNoYXJlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVDbGljaygpOiB2b2lkIHtcclxuICAgICAgICAvLyBDcmVhdGUgYW5kIG9wZW4gbW9kYWwgd2l0aCBVUkwgc3VibWlzc2lvbiBoYW5kbGVyXHJcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgVHJhbnNjcmlwdE1vZGFsKHRoaXMuYXBwLCB0aGlzLm9uVHJhbnNjcmlwdFVybFN1Ym1pdCk7XHJcbiAgICAgICAgbW9kYWwub3BlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2QgdG8gcHJvZ3JhbW1hdGljYWxseSB0cmlnZ2VyIHRoZSBjbGljayBhY3Rpb25cclxuICAgIHB1YmxpYyBjbGljaygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWV0aG9kIHRvIHVwZGF0ZSBidXR0b24gdmlzaWJpbGl0eSBpZiBuZWVkZWRcclxuICAgIHB1YmxpYyBzZXRWaXNpYmlsaXR5KHZpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJpYmJvbkljb24uY2xhc3NMaXN0LnJlbW92ZSgneW91dHViZS1rbm93bGVkZ2UtcmliYm9uLWhpZGRlbicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmliYm9uSWNvbi5jbGFzc0xpc3QuYWRkKCd5b3V0dWJlLWtub3dsZWRnZS1yaWJib24taGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFudXAgbWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIHBsdWdpbiBpcyBkaXNhYmxlZFxyXG4gICAgcHVibGljIGNsZWFudXAoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yaWJib25JY29uPy5yZW1vdmUoKTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgTm90aWNlLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHByaXZhdGUgdXJsID0gJyc7XHJcbiAgICBwcml2YXRlIG9uU3VibWl0OiAodXJsOiBzdHJpbmcpID0+IHZvaWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAodXJsOiBzdHJpbmcpID0+IHZvaWQpIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgICAgIHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcclxuICAgIH1cclxuXHJcbiAgICBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1lvdVR1YmUgdHJhbnNjcmlwdCcgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1Ym1pdFVybCA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnVybCkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnUGxlYXNlIGVudGVyIGEgWW91VHViZSBVUkwnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgVVJMIGFuZCBjbG9zZSB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgIHRoaXMub25TdWJtaXQodGhpcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRmFpbGVkIHRvIHByb2Nlc3MgVVJMOiAnICsgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdZb3VUdWJlIFVSTCcpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbnRlciBhIFlvdVR1YmUgdmlkZW8gbGluaycpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0uLi4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cmwgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdFVybCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChidG4pID0+XHJcbiAgICAgICAgICAgICAgICBidG5cclxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnR2V0IHRyYW5zY3JpcHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKHN1Ym1pdFVybClcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpbiwgcmVxdWVzdCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgWW91VHViZVNlcnZpY2UgfSBmcm9tICcuL1lvdVR1YmVTZXJ2aWNlJztcclxuaW1wb3J0IHR5cGUgeyBTZXR0aW5ncyB9IGZyb20gJy4uL3R5cGVzL3NldHRpbmdzJztcclxuXHJcbmludGVyZmFjZSBQcm9jZXNzZWRVUkxEYXRhIHtcclxuICAgIGNsZWFuVVJMOiBzdHJpbmc7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgdHJhbnNjcmlwdDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVVJMUHJvY2Vzc29yIHtcclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGFuZCB2YWxpZGF0ZXMgYSBZb3VUdWJlIFVSTFxyXG4gICAgICogQHBhcmFtIGRpcnR5VVJMIC0gVGhlIHJhdyBVUkwgaW5wdXQgZnJvbSB0aGUgdXNlclxyXG4gICAgICogQHBhcmFtIGFwcCAtIFRoZSBPYnNpZGlhbiBBcHAgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIFRoZSBwbHVnaW4gc2V0dGluZ3NcclxuICAgICAqIEByZXR1cm5zIFByb2Nlc3NlZFVSTERhdGEgY29udGFpbmluZyBjbGVhbiBVUkwsIHRpdGxlLCBhbmQgdHJhbnNjcmlwdFxyXG4gICAgICogQHRocm93cyBFcnJvciBpZiBVUkwgaXMgaW52YWxpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHByb2Nlc3NVUkwoZGlydHlVUkw6IHN0cmluZywgYXBwOiBBcHAsIHNldHRpbmdzOiBTZXR0aW5ncyk6IFByb21pc2U8UHJvY2Vzc2VkVVJMRGF0YT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghZGlydHlVUkwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVVJMIGNhbm5vdCBiZSBlbXB0eScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgd2hpdGVzcGFjZVxyXG4gICAgICAgICAgICBsZXQgY2xlYW5VUkwgPSBkaXJ0eVVSTC50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IHZpZGVvIElEIHVzaW5nIHZhcmlvdXMgWW91VHViZSBVUkwgZm9ybWF0c1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlb0lkID0gVVJMUHJvY2Vzc29yLmV4dHJhY3RWaWRlb0lkKGNsZWFuVVJMKTtcclxuICAgICAgICAgICAgaWYgKCF2aWRlb0lkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgWW91VHViZSBVUkwgZm9ybWF0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIFlvdVR1YmUgdmlkZW8gVVJMLicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb25zdHJ1Y3QgY2xlYW4gWW91VHViZSBVUkxcclxuICAgICAgICAgICAgY2xlYW5VUkwgPSBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ke3ZpZGVvSWR9YDtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB2aWRlbyBkYXRhIHVzaW5nIHJlcXVlc3QgdG8gZ2V0IHRoZSBwYWdlIEhUTUxcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGNsZWFuVVJMKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG4gICAgICAgICAgICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlLCAndGV4dC9odG1sJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlTWV0YSA9IGRvYy5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ0aXRsZVwiXScpO1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRpdGxlTWV0YT8uZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSB8fCBcIlVudGl0bGVkIFZpZGVvXCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgWW91VHViZVNlcnZpY2UgaW5zdGFuY2Ugd2l0aCBwcm9wZXIgc2V0dGluZ3NcclxuICAgICAgICAgICAgY29uc3QgdGVtcFBsdWdpbiA9IHtcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgbWFuaWZlc3Q6IHt9IGFzIGFueSxcclxuICAgICAgICAgICAgICAgIGFwcFxyXG4gICAgICAgICAgICB9IGFzIFBsdWdpbiAmIHsgc2V0dGluZ3M6IFNldHRpbmdzIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCB5b3V0dWJlU2VydmljZSA9IG5ldyBZb3VUdWJlU2VydmljZSh0ZW1wUGx1Z2luKTtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNjcmlwdCA9IGF3YWl0IHlvdXR1YmVTZXJ2aWNlLmZldGNoVHJhbnNjcmlwdChjbGVhblVSTCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY2xlYW5VUkwsXHJcbiAgICAgICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVUkwgUHJvY2Vzc2luZyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVVJMIFByb2Nlc3NpbmcgZmFpbGVkOiBVbmtub3duIGVycm9yIG9jY3VycmVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRyYWN0cyB0aGUgdmlkZW8gSUQgZnJvbSB2YXJpb3VzIFlvdVR1YmUgVVJMIGZvcm1hdHNcclxuICAgICAqIEBwYXJhbSB1cmwgLSBUaGUgWW91VHViZSBVUkxcclxuICAgICAqIEByZXR1cm5zIFRoZSB2aWRlbyBJRCBvciBudWxsIGlmIGludmFsaWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZXh0cmFjdFZpZGVvSWQodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IFtcclxuICAgICAgICAgICAgLy8gU3RhbmRhcmQgWW91VHViZSBVUkxcclxuICAgICAgICAgICAgLyg/OnlvdXR1YmVcXC5jb21cXC93YXRjaFxcP3Y9fHlvdXR1XFwuYmVcXC8pKFthLXpBLVowLTlfLV17MTF9KS8sXHJcbiAgICAgICAgICAgIC8vIFlvdVR1YmUgU2hvcnRzXHJcbiAgICAgICAgICAgIC95b3V0dWJlXFwuY29tXFwvc2hvcnRzXFwvKFthLXpBLVowLTlfLV17MTF9KS8sXHJcbiAgICAgICAgICAgIC8vIEVtYmVkZGVkIFVSTFxyXG4gICAgICAgICAgICAveW91dHViZVxcLmNvbVxcL2VtYmVkXFwvKFthLXpBLVowLTlfLV17MTF9KS8sXHJcbiAgICAgICAgICAgIC8vIE1vYmlsZSBVUkxcclxuICAgICAgICAgICAgL3lvdXR1YmVcXC5jb21cXC92XFwvKFthLXpBLVowLTlfLV17MTF9KS9cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2gocGF0dGVybik7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgUGx1Z2luLCByZXF1ZXN0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IERlYnVnTG9nZ2VyIH0gZnJvbSBcIi4uL3V0aWxzL2RlYnVnXCI7XHJcbmltcG9ydCB0eXBlIHsgU2V0dGluZ3MgfSBmcm9tIFwiLi4vdHlwZXMvc2V0dGluZ3NcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjcmlwdExpbmUge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgZHVyYXRpb246IG51bWJlcjtcclxuICAgIG9mZnNldDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRSZXNwb25zZSB7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgbGluZXM6IFRyYW5zY3JpcHRMaW5lW107XHJcbn1cclxuXHJcbmludGVyZmFjZSBDYXB0aW9uVHJhY2sge1xyXG4gICAgYmFzZVVybDogc3RyaW5nO1xyXG4gICAgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBZb3VUdWJlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IElOVEVSVkFMX1NFQ09ORFMgPSAzMDtcclxuICAgIHByaXZhdGUgbG9nZ2VyOiBEZWJ1Z0xvZ2dlcjtcclxuICAgIHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luICYgeyBzZXR0aW5nczogU2V0dGluZ3MgfSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IERlYnVnTG9nZ2VyKHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHBsdWdpbi5zZXR0aW5ncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgdHJhbnNjcmlwdCBmcm9tIFlvdVR1YmUgYW5kIHByb2Nlc3NlcyBpdCBpbnRvIDMwLXNlY29uZCBpbnRlcnZhbHNcclxuICAgICAqIEBwYXJhbSBjbGVhblVSTCAtIFRoZSB2YWxpZGF0ZWQgWW91VHViZSBVUkxcclxuICAgICAqIEByZXR1cm5zIEZvcm1hdHRlZCB0cmFuc2NyaXB0IHRleHRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGZldGNoVHJhbnNjcmlwdChjbGVhblVSTDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ0ZldGNoaW5nIHRyYW5zY3JpcHQgZm9yIFVSTDonLCBjbGVhblVSTCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRUcmFuc2NyaXB0RGF0YShjbGVhblVSTCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFRyYW5zY3JpcHQgPSB0aGlzLmZvcm1hdFRyYW5zY3JpcHQocmVzcG9uc2UubGluZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ1N1Y2Nlc3NmdWxseSBmZXRjaGVkIHRyYW5zY3JpcHQ6Jywge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogZm9ybWF0dGVkVHJhbnNjcmlwdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFRyYW5zY3JpcHQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYEZhaWxlZCB0byBmZXRjaCB0cmFuc2NyaXB0OiAke2Vycm9yLm1lc3NhZ2V9YDtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0Vycm9yOicsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldFRyYW5zY3JpcHREYXRhKHVybDogc3RyaW5nKTogUHJvbWlzZTxUcmFuc2NyaXB0UmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCB2aWRlb1BhZ2VCb2R5ID0gYXdhaXQgcmVxdWVzdCh1cmwpO1xyXG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuICAgICAgICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHZpZGVvUGFnZUJvZHksICd0ZXh0L2h0bWwnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NyaXB0cyA9IEFycmF5LmZyb20oZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJTY3JpcHQgPSBzY3JpcHRzLmZpbmQoKHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQpID0+XHJcbiAgICAgICAgICAgIHNjcmlwdC50ZXh0Q29udGVudD8uaW5jbHVkZXMoXCJ2YXIgeXRJbml0aWFsUGxheWVyUmVzcG9uc2UgPSB7XCIpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKCFwbGF5ZXJTY3JpcHQ/LnRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdDb3VsZCBub3QgZmluZCBZb3VUdWJlIHBsYXllciBkYXRhJyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFlvdVR1YmUgcGxheWVyIGRhdGFcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkYXRhU3RyaW5nID0gcGxheWVyU2NyaXB0LnRleHRDb250ZW50XHJcbiAgICAgICAgICAgIC5zcGxpdChcInZhciB5dEluaXRpYWxQbGF5ZXJSZXNwb25zZSA9IFwiKVsxXVxyXG4gICAgICAgICAgICA/LnNwbGl0KFwifTtcIilbMF0gKyBcIn1cIjtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGF0YVN0cmluZy50cmltKCkpO1xyXG4gICAgICAgIGNvbnN0IGNhcHRpb25UcmFja3M6IENhcHRpb25UcmFja1tdID0gZGF0YT8uY2FwdGlvbnM/LnBsYXllckNhcHRpb25zVHJhY2tsaXN0UmVuZGVyZXI/LmNhcHRpb25UcmFja3MgfHwgW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdBdmFpbGFibGUgY2FwdGlvbiB0cmFja3M6JywgY2FwdGlvblRyYWNrcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVXNlIGNvbmZpZ3VyZWQgbGFuZ3VhZ2UgZnJvbSBzZXR0aW5nc1xyXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZExhbmd1YWdlID0gdGhpcy5zZXR0aW5ncy55b3V0dWJlLmxhbmd1YWdlO1xyXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZFRyYWNrID0gY2FwdGlvblRyYWNrcy5maW5kKCh0cmFjaykgPT4gXHJcbiAgICAgICAgICAgIHRyYWNrLmxhbmd1YWdlQ29kZS5pbmNsdWRlcyhwcmVmZXJyZWRMYW5ndWFnZSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBGYWxsYmFjayB0byBFbmdsaXNoIGlmIHByZWZlcnJlZCBsYW5ndWFnZSBub3QgZm91bmRcclxuICAgICAgICBjb25zdCBzZWxlY3RlZFRyYWNrID0gcHJlZmVycmVkVHJhY2sgPz8gY2FwdGlvblRyYWNrcy5maW5kKCh0cmFjaykgPT4gXHJcbiAgICAgICAgICAgIHRyYWNrLmxhbmd1YWdlQ29kZS5pbmNsdWRlcygnZW4nKVxyXG4gICAgICAgICkgPz8gY2FwdGlvblRyYWNrc1swXTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxlY3RlZFRyYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdObyBjYXB0aW9ucyBhdmFpbGFibGUnKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjYXB0aW9ucyBhdmFpbGFibGUgaW4gJHtwcmVmZXJyZWRMYW5ndWFnZX0gb3IgRW5nbGlzaGApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdTZWxlY3RlZCBjYXB0aW9uIHRyYWNrOicsIHNlbGVjdGVkVHJhY2spO1xyXG5cclxuICAgICAgICBjb25zdCBjYXB0aW9uc1VybCA9IHNlbGVjdGVkVHJhY2suYmFzZVVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIilcclxuICAgICAgICAgICAgPyBzZWxlY3RlZFRyYWNrLmJhc2VVcmxcclxuICAgICAgICAgICAgOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tXCIgKyBzZWxlY3RlZFRyYWNrLmJhc2VVcmw7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhcHRpb25zUmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGNhcHRpb25zVXJsKTtcclxuICAgICAgICBjb25zdCBjYXB0aW9uc0RvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoY2FwdGlvbnNSZXNwb25zZSwgJ3RleHQveG1sJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEVsZW1lbnRzID0gY2FwdGlvbnNEb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZXh0XCIpO1xyXG5cclxuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuZXh0cmFjdFRpdGxlKGRvYyk7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdFeHRyYWN0ZWQgdmlkZW8gdGl0bGU6JywgdGl0bGUpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgbGluZXM6IEFycmF5LmZyb20odGV4dEVsZW1lbnRzKS5tYXAodGhpcy5wYXJzZVRyYW5zY3JpcHRMaW5lKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBleHRyYWN0VGl0bGUoZG9jOiBEb2N1bWVudCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdGl0bGVNZXRhID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cInRpdGxlXCJdJyk7XHJcbiAgICAgICAgcmV0dXJuIHRpdGxlTWV0YT8uZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGFyc2VUcmFuc2NyaXB0TGluZShlbGVtZW50OiBFbGVtZW50KTogVHJhbnNjcmlwdExpbmUge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSAoZWxlbWVudC50ZXh0Q29udGVudCB8fCBcIlwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvJiMzOTsvZywgXCInXCIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8mYW1wOy9nLCBcIiZcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoLyZxdW90Oy9nLCAnXCInKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvJmFwb3M7L2csIFwiJ1wiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvJmx0Oy9nLCBcIjxcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoLyZndDsvZywgXCI+XCIpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogcGFyc2VGbG9hdChlbGVtZW50LmdldEF0dHJpYnV0ZShcImR1clwiKSB8fCBcIjBcIikgKiAxMDAwLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IHBhcnNlRmxvYXQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzdGFydFwiKSB8fCBcIjBcIikgKiAxMDAwXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZvcm1hdFRyYW5zY3JpcHQobGluZXM6IFRyYW5zY3JpcHRMaW5lW10pOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGludGVydmFsczogeyBba2V5OiBudW1iZXJdOiBzdHJpbmdbXSB9ID0ge307XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gR3JvdXAgbGluZXMgYnkgMzAtc2Vjb25kIGludGVydmFsc1xyXG4gICAgICAgIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVydmFsSW5kZXggPSBNYXRoLmZsb29yKGxpbmUub2Zmc2V0IC8gKHRoaXMuSU5URVJWQUxfU0VDT05EUyAqIDEwMDApKTtcclxuICAgICAgICAgICAgaWYgKCFpbnRlcnZhbHNbaW50ZXJ2YWxJbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIGludGVydmFsc1tpbnRlcnZhbEluZGV4XSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGludGVydmFsc1tpbnRlcnZhbEluZGV4XS5wdXNoKGxpbmUudGV4dCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEZvcm1hdCB0aGUgdHJhbnNjcmlwdCB3aXRoIHRpbWVzdGFtcHNcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaW50ZXJ2YWxzKVxyXG4gICAgICAgICAgICAubWFwKChbaW50ZXJ2YWwsIHRleHRzXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5mb3JtYXRUaW1lc3RhbXAocGFyc2VJbnQoaW50ZXJ2YWwpICogdGhpcy5JTlRFUlZBTF9TRUNPTkRTKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgWyR7dGltZXN0YW1wfV1cXG4ke3RleHRzLmpvaW4oXCIgXCIpfVxcbmA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZm9ybWF0VGltZXN0YW1wKHNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcclxuICAgICAgICBjb25zdCByZW1haW5pbmdTZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xyXG4gICAgICAgIHJldHVybiBgJHttaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfToke3JlbWFpbmluZ1NlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9YDtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHR5cGUgeyBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB0eXBlIHsgU2V0dGluZ3MgfSBmcm9tICcuLi90eXBlcy9zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVidWdMb2dnZXIge1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbiAmIHsgc2V0dGluZ3M6IFNldHRpbmdzIH07XHJcbiAgICBwcml2YXRlIHByZWZpeCA9ICdbWW91VHViZSBLbm93bGVkZ2VdJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbiAmIHsgc2V0dGluZ3M6IFNldHRpbmdzIH0pIHtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICBsb2cobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMucHJlZml4fSBbJHt0aW1lc3RhbXB9XSAke21lc3NhZ2V9YCwgZGF0YSB8fCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdhcm4obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLnByZWZpeH0gWyR7dGltZXN0YW1wfV0gJHttZXNzYWdlfWAsIGRhdGEgfHwgJycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGVycm9yPzogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7dGhpcy5wcmVmaXh9IFske3RpbWVzdGFtcH1dICR7bWVzc2FnZX1gLCBlcnJvciB8fCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBERUZBVUxUX1BST01QVCB9IGZyb20gJy4uL3Byb21wdHMvZGVmYXVsdF9wcm9tcHQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBZb3VUdWJlU2V0dGluZ3Mge1xyXG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgIHRpbWVmcmFtZVNlY29uZHM6IG51bWJlcjtcclxuICAgIGNsaXBwaW5nc0ZvbGRlcjogc3RyaW5nOyAvLyBBZGRlZCBjbGlwcGluZ3MgZm9sZGVyIHBhdGhcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQW50aHJvcGljTW9kZWwgPSBcclxuICAgIHwgJ2NsYXVkZS0zLTUtc29ubmV0LWxhdGVzdCdcclxuICAgIHwgJ2NsYXVkZS0zLTUtaGFpa3UtbGF0ZXN0J1xyXG4gICAgfCAnY2xhdWRlLTMtb3B1cy1sYXRlc3QnXHJcbiAgICB8ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknXHJcbiAgICB8ICdjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwNyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExMTVNldHRpbmdzIHtcclxuICAgIGFudGhyb3BpY0tleTogc3RyaW5nO1xyXG4gICAgbW9kZWw6IEFudGhyb3BpY01vZGVsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb250cm9scyByYW5kb21uZXNzIGluIHRoZSBtb2RlbCdzIG91dHB1dCAoMC4wIHRvIDEuMClcclxuICAgICAqIC0gTG93ZXIgdmFsdWVzIChlLmcuIDAuMikgPSBNb3JlIGZvY3VzZWQsIGRldGVybWluaXN0aWMgcmVzcG9uc2VzXHJcbiAgICAgKiAtIEhpZ2hlciB2YWx1ZXMgKGUuZy4gMC44KSA9IE1vcmUgY3JlYXRpdmUsIHZhcmllZCByZXNwb25zZXNcclxuICAgICAqIC0gRGVmYXVsdDogMC41IGZvciBiYWxhbmNlZCBvdXRwdXRcclxuICAgICAqL1xyXG4gICAgdGVtcGVyYXR1cmU6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gbnVtYmVyIG9mIHRva2VucyAod29yZHMvY2hhcmFjdGVycykgdG8gZ2VuZXJhdGVcclxuICAgICAqIC0gSGlnaGVyIHZhbHVlcyBhbGxvdyBsb25nZXIgcmVzcG9uc2VzIGJ1dCBjb3N0IG1vcmVcclxuICAgICAqIC0gTG93ZXIgdmFsdWVzIGhlbHAga2VlcCByZXNwb25zZXMgY29uY2lzZVxyXG4gICAgICogLSBEZWZhdWx0OiA0MDAwIHRva2VucyAofjMwMDAgd29yZHMpXHJcbiAgICAgKi9cclxuICAgIG1heFRva2VuczogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTnVjbGV1cyBzYW1wbGluZyB0aHJlc2hvbGQgKDAuMCB0byAxLjApXHJcbiAgICAgKiAtIENvbnRyb2xzIGRpdmVyc2l0eSBieSBsaW1pdGluZyBjdW11bGF0aXZlIHByb2JhYmlsaXR5IG9mIGNvbnNpZGVyZWQgdG9rZW5zXHJcbiAgICAgKiAtIExvd2VyIHZhbHVlcyAoZS5nLiAwLjEpID0gTW9yZSBmb2N1c2VkIG9uIGxpa2VseSB0b2tlbnNcclxuICAgICAqIC0gSGlnaGVyIHZhbHVlcyAoZS5nLiAwLjkpID0gQ29uc2lkZXIgbW9yZSBkaXZlcnNlIHRva2VuIG9wdGlvbnNcclxuICAgICAqIC0gRGVmYXVsdDogMS4wIGZvciBmdWxsIHRva2VuIGRpc3RyaWJ1dGlvblxyXG4gICAgICovXHJcbiAgICB0b3BQOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOdW1iZXIgb2YgaGlnaGVzdCBwcm9iYWJpbGl0eSB0b2tlbnMgdG8gY29uc2lkZXJcclxuICAgICAqIC0gTG93ZXIgdmFsdWVzIChlLmcuIDEwKSA9IE1vcmUgZm9jdXNlZCB3b3JkIGNob2ljZVxyXG4gICAgICogLSBIaWdoZXIgdmFsdWVzIChlLmcuIDEwMCkgPSBNb3JlIGRpdmVyc2Ugdm9jYWJ1bGFyeVxyXG4gICAgICogLSBEZWZhdWx0OiA0MCBmb3IgYmFsYW5jZWQgdm9jYWJ1bGFyeSBzZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgdG9wSzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzIHtcclxuICAgIHlvdXR1YmU6IFlvdVR1YmVTZXR0aW5ncztcclxuICAgIGxsbTogTExNU2V0dGluZ3M7XHJcbiAgICBkZWJ1Z01vZGU6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBTZXR0aW5ncyA9IHtcclxuICAgIHlvdXR1YmU6IHtcclxuICAgICAgICBsYW5ndWFnZTogJ2VuJyxcclxuICAgICAgICB0aW1lZnJhbWVTZWNvbmRzOiA2MCxcclxuICAgICAgICBjbGlwcGluZ3NGb2xkZXI6ICdZb3VUdWJlIENsaXBwaW5ncydcclxuICAgIH0sXHJcbiAgICBsbG06IHtcclxuICAgICAgICBhbnRocm9waWNLZXk6ICcnLFxyXG4gICAgICAgIG1vZGVsOiAnY2xhdWRlLTMtNS1zb25uZXQtbGF0ZXN0JyxcclxuICAgICAgICB0ZW1wZXJhdHVyZTogMC41LCAgICAvLyBCYWxhbmNlZCBiZXR3ZWVuIGNyZWF0aXZpdHkgYW5kIGZvY3VzXHJcbiAgICAgICAgbWF4VG9rZW5zOiA0MDAwLCAgICAgLy8gR29vZCBmb3IgZGV0YWlsZWQgc3VtbWFyaWVzXHJcbiAgICAgICAgdG9wUDogMS4wLCAgICAgICAgICAvLyBDb25zaWRlciBmdWxsIHRva2VuIGRpc3RyaWJ1dGlvblxyXG4gICAgICAgIHRvcEs6IDQwICAgICAgICAgICAgLy8gQmFsYW5jZWQgdm9jYWJ1bGFyeSBkaXZlcnNpdHlcclxuICAgIH0sXHJcbiAgICBkZWJ1Z01vZGU6IGZhbHNlXHJcbn07XHJcblxyXG4vKipcclxuICogQXZhaWxhYmxlIENsYXVkZSBtb2RlbHMgd2l0aCB0aGVpciBjaGFyYWN0ZXJpc3RpY3M6XHJcbiAqIC0gQ2xhdWRlIDMuNSBTb25uZXQ6IExhdGVzdCBiYWxhbmNlZCBtb2RlbCBmb3IgbW9zdCB0YXNrc1xyXG4gKiAtIENsYXVkZSAzLjUgSGFpa3U6IEZhc3RlciwgbW9yZSBlZmZpY2llbnQgbW9kZWxcclxuICogLSBDbGF1ZGUgMyBPcHVzOiBNb3N0IGNhcGFibGUgbW9kZWwgZm9yIGNvbXBsZXggdGFza3NcclxuICogLSBDbGF1ZGUgMyBTb25uZXQ6IFByZXZpb3VzIGdlbmVyYXRpb24gYmFsYW5jZWQgbW9kZWxcclxuICogLSBDbGF1ZGUgMyBIYWlrdTogUHJldmlvdXMgZ2VuZXJhdGlvbiBlZmZpY2llbnQgbW9kZWxcclxuICovXHJcbmV4cG9ydCBjb25zdCBNT0RFTF9PUFRJT05TOiB7IFtrZXk6IHN0cmluZ106IEFudGhyb3BpY01vZGVsIH0gPSB7XHJcbiAgICAnQ2xhdWRlIDMuNSBTb25uZXQnOiAnY2xhdWRlLTMtNS1zb25uZXQtbGF0ZXN0JyxcclxuICAgICdDbGF1ZGUgMy41IEhhaWt1JzogJ2NsYXVkZS0zLTUtaGFpa3UtbGF0ZXN0JyxcclxuICAgICdDbGF1ZGUgMyBPcHVzJzogJ2NsYXVkZS0zLW9wdXMtbGF0ZXN0JyxcclxuICAgICdDbGF1ZGUgMyBTb25uZXQnOiAnY2xhdWRlLTMtc29ubmV0LTIwMjQwMjI5JyxcclxuICAgICdDbGF1ZGUgMyBIYWlrdSc6ICdjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwNydcclxufTtcclxuIiwgImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNldHRpbmdzU3RvcmUgfSBmcm9tICcuLi9zdG9yZS9TZXR0aW5nc1N0b3JlJztcclxuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4uL3R5cGVzL3NldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHNldHRpbmdzU3RvcmU6IFNldHRpbmdzU3RvcmU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHA6IEFwcCwgc2V0dGluZ3NTdG9yZTogU2V0dGluZ3NTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NTdG9yZSA9IHNldHRpbmdzU3RvcmU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGZpbGUgaW4gdGhlIHZhdWx0XHJcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB3aGVyZSB0aGUgZmlsZSBzaG91bGQgYmUgY3JlYXRlZFxyXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gd3JpdGUgdG8gdGhlIGZpbGVcclxuICAgICAqIEByZXR1cm5zIFByb21pc2U8VEZpbGU+IFRoZSBjcmVhdGVkIGZpbGVcclxuICAgICAqL1xyXG4gICAgYXN5bmMgY3JlYXRlRmlsZShwYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8VEZpbGU+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBHZXQgdW5pcXVlIGZpbGVuYW1lXHJcbiAgICAgICAgICAgIGNvbnN0IHVuaXF1ZVBhdGggPSBhd2FpdCB0aGlzLmdldFVuaXF1ZUZpbGVQYXRoKHBhdGgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBmaWxlIGRpcmVjdGx5IGluIHRoZSB2YXVsdCByb290XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUodW5pcXVlUGF0aCwgY29udGVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBmaWxlIGZvciBhIFlvdVR1YmUgdmlkZW9cclxuICAgICAqIEBwYXJhbSB0aXRsZSBUaGUgdmlkZW8gdGl0bGVcclxuICAgICAqIEBwYXJhbSB1cmwgVGhlIHZpZGVvIFVSTFxyXG4gICAgICogQHBhcmFtIHRyYW5zY3JpcHQgT3B0aW9uYWwgdmlkZW8gdHJhbnNjcmlwdFxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxURmlsZT4gVGhlIGNyZWF0ZWQgZmlsZVxyXG4gICAgICovXHJcbiAgICBhc3luYyBjcmVhdGVZb3VUdWJlVmlkZW9GaWxlKHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nLCB0cmFuc2NyaXB0Pzogc3RyaW5nKTogUHJvbWlzZTxURmlsZT4ge1xyXG4gICAgICAgIC8vIENyZWF0ZSBhIHZhbGlkIGZpbGVuYW1lIGZyb20gdGhlIHRpdGxlXHJcbiAgICAgICAgY29uc3Qgc2FmZVRpdGxlID0gdGl0bGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXFxcLzoqP1wiPD58XS9nLCAnJykgLy8gUmVtb3ZlIGludmFsaWQgZmlsZW5hbWUgY2hhcmFjdGVyc1xyXG4gICAgICAgICAgICAudHJpbSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEdldCBjdXJyZW50IGRhdGUgaW4gWVlZWS1NTS1ERCBmb3JtYXRcclxuICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGNsaXBwaW5ncyBmb2xkZXIgcGF0aCBmcm9tIHNldHRpbmdzXHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzU3RvcmUuZ2V0U2V0dGluZ3MoKTtcclxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gc2V0dGluZ3M/LnlvdXR1YmU/LmNsaXBwaW5nc0ZvbGRlciB8fCBERUZBVUxUX1NFVFRJTkdTLnlvdXR1YmUuY2xpcHBpbmdzRm9sZGVyO1xyXG5cclxuICAgICAgICAvLyBFbnN1cmUgdGhlIGNsaXBwaW5ncyBmb2xkZXIgZXhpc3RzXHJcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9sZGVyUGF0aCkpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXJQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBmaWxlIHdpdGggLm1kIGV4dGVuc2lvbiBpbiB0aGUgY2xpcHBpbmdzIGZvbGRlclxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyZWF0ZUZpbGUoXHJcbiAgICAgICAgICAgIGAke2ZvbGRlclBhdGh9LyR7c2FmZVRpdGxlfS5tZGAsXHJcbiAgICAgICAgICAgIGAtLS1cXG51cmw6ICR7dXJsfVxcbmNyZWF0ZWQ6ICR7Y3VycmVudERhdGV9XFxuLS0tXFxuXFxuJHt0cmFuc2NyaXB0IHx8ICcnfWBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHVuaXF1ZSBmaWxlIHBhdGggYnkgYXBwZW5kaW5nIGEgbnVtYmVyIGlmIHRoZSBmaWxlIGFscmVhZHkgZXhpc3RzXHJcbiAgICAgKiBAcGFyYW0gYmFzZVBhdGggVGhlIGluaXRpYWwgZGVzaXJlZCBwYXRoXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPHN0cmluZz4gQSB1bmlxdWUgZmlsZSBwYXRoXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0VW5pcXVlRmlsZVBhdGgoYmFzZVBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgbGV0IGNvdW50ZXIgPSAxO1xyXG4gICAgICAgIGxldCB1bmlxdWVQYXRoID0gYmFzZVBhdGg7XHJcblxyXG4gICAgICAgIHdoaWxlIChhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyh1bmlxdWVQYXRoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBleHQgPSBiYXNlUGF0aC5pbmNsdWRlcygnLicpID8gYmFzZVBhdGguc3BsaXQoJy4nKS5wb3AoKSA6ICcnO1xyXG4gICAgICAgICAgICBjb25zdCBiYXNlV2l0aG91dEV4dCA9IGJhc2VQYXRoLmluY2x1ZGVzKCcuJykgPyBcclxuICAgICAgICAgICAgICAgIGJhc2VQYXRoLnNsaWNlKDAsIGJhc2VQYXRoLmxhc3RJbmRleE9mKCcuJykpIDogXHJcbiAgICAgICAgICAgICAgICBiYXNlUGF0aDtcclxuICAgICAgICAgICAgdW5pcXVlUGF0aCA9IGAke2Jhc2VXaXRob3V0RXh0fSAke2NvdW50ZXJ9LiR7ZXh0fWA7XHJcbiAgICAgICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1bmlxdWVQYXRoO1xyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBURmlsZSwgTm90aWNlLCByZXF1ZXN0VXJsLCBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNldHRpbmdzU3RvcmUgfSBmcm9tICcuLi9zdG9yZS9TZXR0aW5nc1N0b3JlJztcclxuaW1wb3J0IHsgRmlsZVNlcnZpY2UgfSBmcm9tICcuL0ZpbGVTZXJ2aWNlJztcclxuaW1wb3J0IHsgRGVidWdMb2dnZXIgfSBmcm9tICcuLi91dGlscy9kZWJ1Zyc7XHJcbmltcG9ydCB0eXBlIHsgU2V0dGluZ3MgfSBmcm9tICcuLi90eXBlcy9zZXR0aW5ncyc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJPTVBUIH0gZnJvbSAnLi4vcHJvbXB0cy9kZWZhdWx0X3Byb21wdCc7XHJcblxyXG5pbnRlcmZhY2UgQW50aHJvcGljUmVzcG9uc2Uge1xyXG4gICAgY29udGVudDogW3tcclxuICAgICAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICB9XTtcclxuICAgIHVzYWdlPzoge1xyXG4gICAgICAgIGlucHV0X3Rva2VuczogbnVtYmVyO1xyXG4gICAgICAgIG91dHB1dF90b2tlbnM6IG51bWJlcjtcclxuICAgIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBBbnRocm9waWNFcnJvciB7XHJcbiAgICBlcnJvcjoge1xyXG4gICAgICAgIHR5cGU6IHN0cmluZztcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVExEUlNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBsb2dnZXI6IERlYnVnTG9nZ2VyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgc2V0dGluZ3NTdG9yZTogU2V0dGluZ3NTdG9yZSxcclxuICAgICAgICBwcml2YXRlIGZpbGVTZXJ2aWNlOiBGaWxlU2VydmljZSxcclxuICAgICAgICBwbHVnaW46IFBsdWdpbiAmIHsgc2V0dGluZ3M6IFNldHRpbmdzIH1cclxuICAgICkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IERlYnVnTG9nZ2VyKHBsdWdpbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgYSBmaWxlIHRvIGNyZWF0ZSBhIFRMRFIgc3VtbWFyeVxyXG4gICAgICogQHBhcmFtIGZpbGUgVGhlIGZpbGUgdG8gcHJvY2Vzc1xyXG4gICAgICogQHRocm93cyBFcnJvciBpZiBmaWxlIGlzIGludmFsaWQsIHNldHRpbmdzIGFyZSBtaXNzaW5nLCBvciBBUEkgZmFpbHNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcHJvY2Vzc0ZpbGUoZmlsZTogdW5rbm93bik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdJbnZhbGlkIGZpbGUgb2JqZWN0IHByb3ZpZGVkOicsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZpbGUgb2JqZWN0OiBFeHBlY3RlZCBURmlsZSBpbnN0YW5jZScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ1N0YXJ0aW5nIFRMRFIgZ2VuZXJhdGlvbiBmb3IgZmlsZTonLCBmaWxlLnBhdGgpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKCdcdUQ4M0VcdUREMTYgU3RhcnRpbmcgVExEUiBnZW5lcmF0aW9uLi4uJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3NTdG9yZS5nZXRMTE1TZXR0aW5ncygpO1xyXG4gICAgICAgICAgICBpZiAoIXNldHRpbmdzLmFudGhyb3BpY0tleSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0FudGhyb3BpYyBBUEkga2V5IG5vdCBjb25maWd1cmVkJyk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FudGhyb3BpYyBBUEkga2V5IGlzIG5vdCBjb25maWd1cmVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlYWQgZmlsZSBjb250ZW50XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmaWxlLnZhdWx0LnJlYWQoZmlsZSk7XHJcbiAgICAgICAgICAgIGlmICghY29udGVudC50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdFbXB0eSBmaWxlIGNvbnRlbnQgZm9yOicsIGZpbGUucGF0aCk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgaXMgZW1wdHknKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdGaWxlIGNvbnRlbnQgbG9hZGVkLCBjYWxsaW5nIEFudGhyb3BpYyBBUEknKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGwgQW50aHJvcGljIEFQSVxyXG4gICAgICAgICAgICBjb25zdCB7IHN1bW1hcnksIGNvc3QgfSA9IGF3YWl0IHRoaXMuY2FsbEFudGhyb3BpY0FQSShjb250ZW50LCBzZXR0aW5ncy5hbnRocm9waWNLZXksIHNldHRpbmdzLm1vZGVsKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzdW1tYXJ5IGZpbGUgcGF0aCBiYXNlZCBvbiBvcmlnaW5hbCBmaWxlXHJcbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlQYXRoID0gYCR7ZmlsZS5wYXRoLnJlcGxhY2UoJy5tZCcsICcnKX0tc3VtbWFyeS5tZGA7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygnQ3JlYXRpbmcgc3VtbWFyeSBmaWxlIGF0OicsIHN1bW1hcnlQYXRoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGRhdGUgaW4gWVlZWS1NTS1ERCBmb3JtYXRcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlDb250ZW50ID0gYC0tLVxyXG5wYXJlbnQ6IFtbJHtmaWxlLmJhc2VuYW1lfV1dXHJcbmNyZWF0ZWQ6ICR7Y3VycmVudERhdGV9XHJcbmNvc3Q6ICR7Y29zdH1cclxuLS0tXHJcblxyXG4jIFN1bW1hcnkgb2YgJHtmaWxlLmJhc2VuYW1lfVxyXG5cclxuJHtzdW1tYXJ5fWA7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpbGVTZXJ2aWNlLmNyZWF0ZUZpbGUoc3VtbWFyeVBhdGgsIHN1bW1hcnlDb250ZW50KTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdTdW1tYXJ5IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JywgeyBwYXRoOiBzdW1tYXJ5UGF0aCwgY29zdCB9KTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgXHUyNzA1IFN1bW1hcnkgY3JlYXRlZCBzdWNjZXNzZnVsbHkgKENvc3Q6ICQke2Nvc3QudG9GaXhlZCg0KX0pYCk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBzdW1tYXJ5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1Mjc0QyBGYWlsZWQgdG8gY3JlYXRlIHN1bW1hcnk6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdVbmtub3duIGVycm9yIG9jY3VycmVkJyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxzIHRoZSBBbnRocm9waWMgQVBJIHRvIGdlbmVyYXRlIGEgc3VtbWFyeVxyXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gc3VtbWFyaXplXHJcbiAgICAgKiBAcGFyYW0gYXBpS2V5IFRoZSBBbnRocm9waWMgQVBJIGtleVxyXG4gICAgICogQHBhcmFtIG1vZGVsIFRoZSBtb2RlbCB0byB1c2VcclxuICAgICAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgc3VtbWFyeSBhbmQgZXN0aW1hdGVkIGNvc3RcclxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgQVBJIGNhbGwgZmFpbHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBjYWxsQW50aHJvcGljQVBJKFxyXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZywgXHJcbiAgICAgICAgYXBpS2V5OiBzdHJpbmcsXHJcbiAgICAgICAgbW9kZWw6IHN0cmluZ1xyXG4gICAgKTogUHJvbWlzZTx7IHN1bW1hcnk6IHN0cmluZzsgY29zdDogbnVtYmVyIH0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ0NhbGxpbmcgQW50aHJvcGljIEFQSSB3aXRoIG1vZGVsOicsIG1vZGVsKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxL21lc3NhZ2VzJyxcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGFwaUtleSxcclxuICAgICAgICAgICAgICAgICAgICAnYW50aHJvcGljLXZlcnNpb24nOiAnMjAyMy0wNi0wMSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heF90b2tlbnM6IDQwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYCR7REVGQVVMVF9QUk9NUFR9XFxuXFxuQ29udGVudCB0byBzdW1tYXJpemU6XFxuJHtjb250ZW50fWBcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC41XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IHJlc3BvbnNlLmpzb24gYXMgQW50aHJvcGljRXJyb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignQVBJIGVycm9yIHJlc3BvbnNlOicsIGVycm9yRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvcjogJHtlcnJvckRhdGEuZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmpzb24gYXMgQW50aHJvcGljUmVzcG9uc2U7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgYXBwcm94aW1hdGUgY29zdCBiYXNlZCBvbiBDbGF1ZGUgMyBwcmljaW5nXHJcbiAgICAgICAgICAgIC8vIFNvbm5ldDogSW5wdXQgJDE1L00sIE91dHB1dCAkNzUvTVxyXG4gICAgICAgICAgICAvLyBIYWlrdTogSW5wdXQgJDMvTSwgT3V0cHV0ICQxNS9NXHJcbiAgICAgICAgICAgIC8vIE9wdXM6IElucHV0ICQxNS9NLCBPdXRwdXQgJDc1L01cclxuICAgICAgICAgICAgbGV0IGlucHV0UmF0ZSA9IDAuMDAwMDE1OyAvLyBEZWZhdWx0IHRvIFNvbm5ldC9PcHVzIHJhdGVcclxuICAgICAgICAgICAgbGV0IG91dHB1dFJhdGUgPSAwLjAwMDA3NTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChtb2RlbC5pbmNsdWRlcygnaGFpa3UnKSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRSYXRlID0gMC4wMDAwMDM7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRSYXRlID0gMC4wMDAwMTU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0VG9rZW5zID0gZGF0YS51c2FnZT8uaW5wdXRfdG9rZW5zIHx8IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFRva2VucyA9IGRhdGEudXNhZ2U/Lm91dHB1dF90b2tlbnMgfHwgMDtcclxuICAgICAgICAgICAgY29uc3QgY29zdCA9IChpbnB1dFRva2VucyAqIGlucHV0UmF0ZSkgKyAob3V0cHV0VG9rZW5zICogb3V0cHV0UmF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ0FQSSBjYWxsIHN1Y2Nlc3NmdWwnLCB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbCxcclxuICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zLFxyXG4gICAgICAgICAgICAgICAgb3V0cHV0VG9rZW5zLFxyXG4gICAgICAgICAgICAgICAgY29zdFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdW1tYXJ5OiBkYXRhLmNvbnRlbnRbMF0udGV4dC50cmltKCksXHJcbiAgICAgICAgICAgICAgICBjb3N0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgcmF0ZSBsaW1pdHMgc3BlY2lmaWNhbGx5XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygncmF0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ1JhdGUgbGltaXQgZXhjZWVkZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhdGUgbGltaXQgZXhjZWVkZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignQVBJIGNhbGwgZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCB0byBBbnRocm9waWMgQVBJJyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNvbm5lY3QgdG8gQW50aHJvcGljIEFQSScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCAiZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPTVBUID0gYFBsZWFzZSBwcm92aWRlIGEgY29tcHJlaGVuc2l2ZSBhbmFseXNpcyBvZiB0aGlzIFlvdVR1YmUgdmlkZW8gdHJhbnNjcmlwdC4gU3RydWN0dXJlIHlvdXIgcmVzcG9uc2UgYXMgZm9sbG93czpcclxuXHJcbi0tLVxyXG50YWdzOiAjS2V5VG9waWNzICNNYWluVGhlbWVzICNWaWRlb0FuYWx5c2lzXHJcbi0tLVxyXG5cclxuIyBTdW1tYXJ5XHJcbi0gTWFpbiB0b3BpY3MgYW5kIGtleSBwb2ludHNcclxuLSBJbXBvcnRhbnQgZGV0YWlscyBhbmQgZXhhbXBsZXNcclxuLSBLZXkgY29uY2x1c2lvbnMgb3IgdGFrZWF3YXlzXHJcblxyXG4jIFNvdXJjZXMgJiBSZWZlcmVuY2VzXHJcbi0gQm9va3MsIGFydGljbGVzLCBwYXBlcnMgY2l0ZWQgKHdpdGggdGltZXN0YW1wcyBpZiBhdmFpbGFibGUpXHJcbi0gRXhwZXJ0cyBvciBhdXRob3JpdGllcyBxdW90ZWRcclxuLSBXZWJzaXRlcyBvciByZXNvdXJjZXMgbWVudGlvbmVkXHJcbi0gVG9vbHMgb3IgdGVjaG5vbG9naWVzIGRpc2N1c3NlZFxyXG5cclxuIyBBZGRpdGlvbmFsIENvbnRleHRcclxuLSBNZXRob2RvbG9naWNhbCBub3RlcyBvciBsaW1pdGF0aW9ucyBtZW50aW9uZWRcclxuLSBSZWxhdGVkIGNvbnRlbnQgc3VnZ2VzdGlvbnNcclxuLSBJbXBvcnRhbnQgdGltZXN0YW1wcyBmb3Iga2V5IG1vbWVudHNcclxuXHJcbk5vdGU6IElmIG5vIHNvdXJjZXMvcmVmZXJlbmNlcyBhcmUgZXhwbGljaXRseSBtZW50aW9uZWQsIGZvY3VzIG9uIHByb3ZpZGluZyBhIHRob3JvdWdoIHN1bW1hcnkgb2YgdGhlIG1haW4gY29udGVudC5gO1xyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgR2VuZXJhbFNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncy9jb21wb25lbnRzL0dlbmVyYWxTZXR0aW5ncyc7XG5pbXBvcnQgdHlwZSBZb3V0dWJlS25vd2xlZGdlUGx1Z2luIGZyb20gJy4uLy4uL21haW4nO1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBwbHVnaW46IFlvdXR1YmVLbm93bGVkZ2VQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhbGwgc2V0dGluZ3MgdGhyb3VnaCBHZW5lcmFsU2V0dGluZ3NcbiAgICAgICAgbmV3IEdlbmVyYWxTZXR0aW5ncyhjb250YWluZXJFbCwgdGhpcy5wbHVnaW4uc2V0dGluZ3NTdG9yZSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNldHRpbmdzU3RvcmUgfSBmcm9tICcuLi8uLi8uLi9zdG9yZS9TZXR0aW5nc1N0b3JlJztcclxuaW1wb3J0IHsgTU9ERUxfT1BUSU9OUyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL3NldHRpbmdzJztcclxuaW1wb3J0IHsgREVGQVVMVF9QUk9NUFQgfSBmcm9tICcuLi8uLi8uLi9wcm9tcHRzL2RlZmF1bHRfcHJvbXB0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmFsU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBwcml2YXRlIHNldHRpbmdzU3RvcmU6IFNldHRpbmdzU3RvcmUpIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHNldHRpbmdzU3RvcmUuZ2V0U2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgLy8gTGFuZ3VhZ2UgU2V0dGluZ3NcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0xhbmd1YWdlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1NlbGVjdCB0aGUgbGFuZ3VhZ2UgZm9yIFlvdVR1YmUgb3BlcmF0aW9ucycpXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2VuJywgJ0VuZ2xpc2gnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2VzJywgJ1NwYW5pc2gnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2ZyJywgJ0ZyZW5jaCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignZGUnLCAnR2VybWFuJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdpdCcsICdJdGFsaWFuJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdwdCcsICdQb3J0dWd1ZXNlJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdydScsICdSdXNzaWFuJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdqYScsICdKYXBhbmVzZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbigna28nLCAnS29yZWFuJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCd6aCcsICdDaGluZXNlJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MueW91dHViZS5sYW5ndWFnZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHRpbmdzU3RvcmUudXBkYXRlWW91VHViZVNldHRpbmdzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy55b3V0dWJlLnRpbWVmcmFtZVNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy55b3V0dWJlLmNsaXBwaW5nc0ZvbGRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVGltZWZyYW1lIFNldHRpbmdzXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdUaW1lZnJhbWUnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnU2V0IHRoZSB0aW1lZnJhbWUgaW4gc2Vjb25kcyBmb3IgcHJvY2Vzc2luZycpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCc2MCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MueW91dHViZS50aW1lZnJhbWVTZWNvbmRzLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHRpbWVmcmFtZSkgJiYgdGltZWZyYW1lID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXR0aW5nc1N0b3JlLnVwZGF0ZVlvdVR1YmVTZXR0aW5ncyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnlvdXR1YmUubGFuZ3VhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy55b3V0dWJlLmNsaXBwaW5nc0ZvbGRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIENsaXBwaW5ncyBGb2xkZXIgU2V0dGluZ3NcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0NsaXBwaW5ncyBGb2xkZXInKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnU2V0IHRoZSBmb2xkZXIgcGF0aCBmb3Igc3RvcmluZyBZb3VUdWJlIGNsaXBwaW5ncycpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdZb3VUdWJlIENsaXBwaW5ncycpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MueW91dHViZS5jbGlwcGluZ3NGb2xkZXIpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXR0aW5nc1N0b3JlLnVwZGF0ZVlvdVR1YmVTZXR0aW5ncyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnlvdXR1YmUubGFuZ3VhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy55b3V0dWJlLnRpbWVmcmFtZVNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS50cmltKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBEZWJ1ZyBNb2RlIFNldHRpbmdzXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdEZWJ1ZyBtb2RlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0VuYWJsZSBkZXRhaWxlZCBjb25zb2xlIGxvZ2dpbmcgZm9yIHRyb3VibGVzaG9vdGluZycpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHNldHRpbmdzLmRlYnVnTW9kZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXR0aW5nc1N0b3JlLnVwZGF0ZURlYnVnTW9kZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBZGQgaGVhZGluZyBmb3IgQUkgTW9kZWwgU2V0dGluZ3NcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdBSSBNb2RlbCBTZXR0aW5ncycgfSk7XHJcblxyXG4gICAgICAgIC8vIEFudGhyb3BpYyBBUEkgS2V5IFNldHRpbmdcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0FudGhyb3BpYyBBUEkgS2V5JylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0VudGVyIHlvdXIgQW50aHJvcGljIEFQSSBrZXkgZm9yIENsYXVkZSBhY2Nlc3MnKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBBUEkga2V5JylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MubGxtLmFudGhyb3BpY0tleSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHRpbmdzU3RvcmUudXBkYXRlTExNU2V0dGluZ3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGlucHV0IGVsZW1lbnQgYW5kIHNldCBpdHMgdHlwZSB0byBwYXNzd29yZFxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRFbCA9IGlucHV0LmlucHV0RWw7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEVsLnR5cGUgPSAncGFzc3dvcmQnO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBNb2RlbCBTZWxlY3Rpb25cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ01vZGVsJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1NlbGVjdCB0aGUgQ2xhdWRlIG1vZGVsIHRvIHVzZSBmb3Igc3VtbWFyaWVzJylcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKE1PREVMX09QVElPTlMpLmZvckVhY2goKFtuYW1lLCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24odmFsdWUsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZShzZXR0aW5ncy5sbG0ubW9kZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXR0aW5nc1N0b3JlLnVwZGF0ZUxMTVNldHRpbmdzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgYXMgYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBNb2RlbCBQcm9tcHQgRGlzcGxheVxyXG4gICAgICAgIGNvbnN0IHByb21wdFNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ01vZGVsIFByb21wdCcpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgZGVmYXVsdCBwcm9tcHQgdXNlZCBmb3IgZ2VuZXJhdGluZyBzdW1tYXJpZXMnKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvbXB0VGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xyXG4gICAgICAgIHByb21wdFRleHRBcmVhLnZhbHVlID0gREVGQVVMVF9QUk9NUFQ7XHJcbiAgICAgICAgcHJvbXB0VGV4dEFyZWEucm93cyA9IDEwO1xyXG4gICAgICAgIHByb21wdFRleHRBcmVhLnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgIHByb21wdFRleHRBcmVhLnN0eWxlLm1hcmdpblRvcCA9ICcxMHB4JztcclxuICAgICAgICBwcm9tcHRUZXh0QXJlYS5yZWFkT25seSA9IHRydWU7XHJcbiAgICAgICAgcHJvbXB0VGV4dEFyZWEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KSc7XHJcbiAgICAgICAgcHJvbXB0VGV4dEFyZWEuc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xyXG5cclxuICAgICAgICBwcm9tcHRTZXR0aW5nLnNldHRpbmdFbC5hcHBlbmRDaGlsZChwcm9tcHRUZXh0QXJlYSk7XHJcblxyXG4gICAgICAgIC8vIFRlbXBlcmF0dXJlIFNldHRpbmdcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1RlbXBlcmF0dXJlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0NvbnRyb2xzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dC4gTG93ZXIgdmFsdWVzICgwLjApIGFyZSBtb3JlIGZvY3VzZWQsIGhpZ2hlciB2YWx1ZXMgKDEuMCkgYXJlIG1vcmUgY3JlYXRpdmUuJylcclxuICAgICAgICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldExpbWl0cygwLCAxLCAwLjEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHNldHRpbmdzLmxsbS50ZW1wZXJhdHVyZSlcclxuICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2V0dGluZ3NTdG9yZS51cGRhdGVMTE1TZXR0aW5ncyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBNYXggVG9rZW5zIFNldHRpbmdcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ01heCBUb2tlbnMnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnTWF4aW11bSBsZW5ndGggb2YgdGhlIGdlbmVyYXRlZCBzdW1tYXJ5LiBIaWdoZXIgdmFsdWVzIGFsbG93IGxvbmdlciByZXNwb25zZXMuJylcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCc0MDAwJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MubGxtLm1heFRva2Vucy50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih0b2tlbnMpICYmIHRva2VucyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHRpbmdzU3RvcmUudXBkYXRlTExNU2V0dGluZ3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFRvcCBQIFNldHRpbmdcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1RvcCBQJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0NvbnRyb2xzIGRpdmVyc2l0eSBieSBsaW1pdGluZyBjdW11bGF0aXZlIHByb2JhYmlsaXR5IG9mIGNvbnNpZGVyZWQgdG9rZW5zLiBMb3dlciB2YWx1ZXMgKDAuMSkgZm9jdXMgb24gbGlrZWx5IHRva2VucywgaGlnaGVyIHZhbHVlcyAoMS4wKSBhbGxvdyBtb3JlIGRpdmVyc2l0eS4nKVxyXG4gICAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDAsIDEsIDAuMSlcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MubGxtLnRvcFApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHRpbmdzU3RvcmUudXBkYXRlTExNU2V0dGluZ3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVG9wIEsgU2V0dGluZ1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnVG9wIEsnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnTnVtYmVyIG9mIGhpZ2hlc3QgcHJvYmFiaWxpdHkgdG9rZW5zIHRvIGNvbnNpZGVyLiBMb3dlciB2YWx1ZXMgKDEwKSBnaXZlIG1vcmUgZm9jdXNlZCB3b3JkIGNob2ljZSwgaGlnaGVyIHZhbHVlcyAoMTAwKSBhbGxvdyBtb3JlIGRpdmVyc2Ugdm9jYWJ1bGFyeS4nKVxyXG4gICAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDEsIDEwMCwgMSlcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MubGxtLnRvcEspXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHRpbmdzU3RvcmUudXBkYXRlTExNU2V0dGluZ3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBTZXR0aW5ncywgREVGQVVMVF9TRVRUSU5HUywgQW50aHJvcGljTW9kZWwgfSBmcm9tICcuLi90eXBlcy9zZXR0aW5ncyc7XHJcblxyXG4vKipcclxuICogTWFuYWdlcyBwbHVnaW4gc2V0dGluZ3MgcGVyc2lzdGVuY2UgYW5kIGFjY2Vzc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzU3RvcmUge1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcclxuICAgIHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyBzZXR0aW5ncyBmcm9tIE9ic2lkaWFuJ3MgZGF0YSBzdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBsb2FkZWREYXRhID0gYXdhaXQgdGhpcy5wbHVnaW4ubG9hZERhdGEoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgICAgIC4uLkRFRkFVTFRfU0VUVElOR1MsXHJcbiAgICAgICAgICAgICAgICAuLi5sb2FkZWREYXRhXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgc2V0dGluZ3M6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHNldHRpbmdzLiBVc2luZyBkZWZhdWx0cy4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYXZlcyBjdXJyZW50IHNldHRpbmdzIHRvIE9ic2lkaWFuJ3MgZGF0YSBzdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzZXR0aW5nczonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBzZXR0aW5ncyB3aXRoIG5ldyB2YWx1ZXMgYW5kIHNhdmVzIHRoZW1cclxuICAgICAqIEBwYXJhbSBuZXdTZXR0aW5ncyAtIFBhcnRpYWwgc2V0dGluZ3Mgb2JqZWN0IHRvIG1lcmdlIHdpdGggY3VycmVudCBzZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBhc3luYyB1cGRhdGVTZXR0aW5ncyhuZXdTZXR0aW5nczogUGFydGlhbDxTZXR0aW5ncz4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIC4uLm5ld1NldHRpbmdzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBzZXR0aW5nczonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBzZXR0aW5ncy4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIGdldFNldHRpbmdzKCk6IFNldHRpbmdzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgWW91VHViZS1zcGVjaWZpYyBzZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBnZXRZb3VUdWJlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MueW91dHViZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgTExNLXNwZWNpZmljIHNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIGdldExMTVNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmxsbTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgWW91VHViZSBzZXR0aW5nc1xyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIC0gU2VsZWN0ZWQgbGFuZ3VhZ2VcclxuICAgICAqIEBwYXJhbSB0aW1lZnJhbWVTZWNvbmRzIC0gVGltZWZyYW1lIGluIHNlY29uZHNcclxuICAgICAqIEBwYXJhbSBjbGlwcGluZ3NGb2xkZXIgLSBQYXRoIHRvIHN0b3JlIFlvdVR1YmUgY2xpcHBpbmdzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHVwZGF0ZVlvdVR1YmVTZXR0aW5ncyhcclxuICAgICAgICBsYW5ndWFnZTogc3RyaW5nLCBcclxuICAgICAgICB0aW1lZnJhbWVTZWNvbmRzOiBudW1iZXIsXHJcbiAgICAgICAgY2xpcHBpbmdzRm9sZGVyPzogc3RyaW5nXHJcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAodGltZWZyYW1lU2Vjb25kcyA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGltZWZyYW1lIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgc2Vjb25kcycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIHlvdXR1YmU6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuc2V0dGluZ3MueW91dHViZSxcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlLFxyXG4gICAgICAgICAgICAgICAgdGltZWZyYW1lU2Vjb25kcyxcclxuICAgICAgICAgICAgICAgIC4uLihjbGlwcGluZ3NGb2xkZXIgJiYgeyBjbGlwcGluZ3NGb2xkZXIgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBMTE0gc2V0dGluZ3NcclxuICAgICAqIEBwYXJhbSBhbnRocm9waWNLZXkgLSBBbnRocm9waWMgQVBJIGtleVxyXG4gICAgICogQHBhcmFtIG1vZGVsIC0gQW50aHJvcGljIG1vZGVsIHNlbGVjdGlvblxyXG4gICAgICogQHBhcmFtIHRlbXBlcmF0dXJlIC0gQ29udHJvbHMgcmFuZG9tbmVzcyAoMC4wIHRvIDEuMClcclxuICAgICAqIEBwYXJhbSBtYXhUb2tlbnMgLSBNYXhpbXVtIGxlbmd0aCBvZiBnZW5lcmF0ZWQgdGV4dFxyXG4gICAgICogQHBhcmFtIHRvcFAgLSBOdWNsZXVzIHNhbXBsaW5nIHRocmVzaG9sZCAoMC4wIHRvIDEuMClcclxuICAgICAqIEBwYXJhbSB0b3BLIC0gTnVtYmVyIG9mIHRva2VucyB0byBjb25zaWRlclxyXG4gICAgICovXHJcbiAgICBhc3luYyB1cGRhdGVMTE1TZXR0aW5ncyhcclxuICAgICAgICBhbnRocm9waWNLZXk/OiBzdHJpbmcsXHJcbiAgICAgICAgbW9kZWw/OiBBbnRocm9waWNNb2RlbCxcclxuICAgICAgICB0ZW1wZXJhdHVyZT86IG51bWJlcixcclxuICAgICAgICBtYXhUb2tlbnM/OiBudW1iZXIsXHJcbiAgICAgICAgdG9wUD86IG51bWJlcixcclxuICAgICAgICB0b3BLPzogbnVtYmVyXHJcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBzZXR0aW5ncyBpZiBiZWluZyB1cGRhdGVkXHJcbiAgICAgICAgaWYgKGFudGhyb3BpY0tleSA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbnRocm9waWMgQVBJIGtleSBpcyByZXF1aXJlZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBzZXR0aW5ncyBvYmplY3Qgd2l0aCBvbmx5IGRlZmluZWQgdmFsdWVzXHJcbiAgICAgICAgY29uc3QgbmV3U2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuc2V0dGluZ3MubGxtLFxyXG4gICAgICAgICAgICAuLi4oYW50aHJvcGljS2V5ICE9PSB1bmRlZmluZWQgJiYgeyBhbnRocm9waWNLZXkgfSksXHJcbiAgICAgICAgICAgIC4uLihtb2RlbCAhPT0gdW5kZWZpbmVkICYmIHsgbW9kZWwgfSksXHJcbiAgICAgICAgICAgIC4uLih0ZW1wZXJhdHVyZSAhPT0gdW5kZWZpbmVkICYmIHsgdGVtcGVyYXR1cmUgfSksXHJcbiAgICAgICAgICAgIC4uLihtYXhUb2tlbnMgIT09IHVuZGVmaW5lZCAmJiB7IG1heFRva2VucyB9KSxcclxuICAgICAgICAgICAgLi4uKHRvcFAgIT09IHVuZGVmaW5lZCAmJiB7IHRvcFAgfSksXHJcbiAgICAgICAgICAgIC4uLih0b3BLICE9PSB1bmRlZmluZWQgJiYgeyB0b3BLIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gVmFsaWRhdGUgbnVtZXJpYyByYW5nZXNcclxuICAgICAgICBpZiAodGVtcGVyYXR1cmUgIT09IHVuZGVmaW5lZCAmJiAodGVtcGVyYXR1cmUgPCAwIHx8IHRlbXBlcmF0dXJlID4gMSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZW1wZXJhdHVyZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF4VG9rZW5zICE9PSB1bmRlZmluZWQgJiYgbWF4VG9rZW5zIDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXggdG9rZW5zIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvcFAgIT09IHVuZGVmaW5lZCAmJiAodG9wUCA8IDAgfHwgdG9wUCA+IDEpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9wIFAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvcEsgIT09IHVuZGVmaW5lZCAmJiB0b3BLIDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgSyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgbGxtOiBuZXdTZXR0aW5nc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBkZWJ1ZyBtb2RlIHNldHRpbmdcclxuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gV2hldGhlciBkZWJ1ZyBtb2RlIHNob3VsZCBiZSBlbmFibGVkXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHVwZGF0ZURlYnVnTW9kZShlbmFibGVkOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIGRlYnVnTW9kZTogZW5hYmxlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxtQkFBK0I7OztBQ0EvQixJQUFBQyxtQkFBcUM7OztBQ0FyQyxzQkFBNEM7QUFFckMsSUFBTSxrQkFBTixjQUE4QixzQkFBTTtBQUFBLEVBSXZDLFlBQVksS0FBVSxVQUFpQztBQUNuRCxVQUFNLEdBQUc7QUFKYixTQUFRLE1BQU07QUFLVixTQUFLLFdBQVc7QUFBQSxFQUNwQjtBQUFBLEVBRUEsU0FBUztBQUNMLFVBQU0sRUFBRSxVQUFVLElBQUk7QUFDdEIsY0FBVSxTQUFTLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXZELFVBQU0sWUFBWSxNQUFNO0FBQ3BCLFVBQUksQ0FBQyxLQUFLLEtBQUs7QUFDWCxZQUFJLHVCQUFPLDRCQUE0QjtBQUN2QztBQUFBLE1BQ0o7QUFFQSxVQUFJO0FBRUEsYUFBSyxTQUFTLEtBQUssR0FBRztBQUN0QixhQUFLLE1BQU07QUFBQSxNQUNmLFNBQVMsT0FBUDtBQUNFLFlBQUksdUJBQU8sNEJBQTRCLE1BQU0sT0FBTztBQUFBLE1BQ3hEO0FBQUEsSUFDSjtBQUVBLFFBQUksd0JBQVEsU0FBUyxFQUNoQixRQUFRLGFBQWEsRUFDckIsUUFBUSw0QkFBNEIsRUFDcEM7QUFBQSxNQUFRLENBQUMsU0FDTixLQUNLLGVBQWUscUNBQXFDLEVBQ3BELFNBQVMsQ0FBQyxV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UUFBSTtBQUNBLFlBQU0sZ0JBQWdCLE1BQU0sYUFBYSxXQUFXLFVBQVUsS0FBSyxLQUFLLEtBQUssUUFBUTtBQUNyRixVQUFJLHdCQUFPLGNBQWMsY0FBYyxVQUFVO0FBRWpELFlBQU0sT0FBTyxNQUFNLEtBQUssWUFBWTtBQUFBLFFBQ2hDLGNBQWM7QUFBQSxRQUNkLGNBQWM7QUFBQSxRQUNkLGNBQWM7QUFBQSxNQUNsQjtBQUVBLFlBQU0sS0FBSyxZQUFZLFlBQVksSUFBSTtBQUFBLElBRTNDLFNBQVMsT0FBUDtBQUNFLFlBQU0sZUFBZSxpQkFBaUIsUUFBUSxNQUFNLFVBQVU7QUFDOUQsVUFBSSx3QkFBTyxVQUFVLGNBQWM7QUFDbkMsY0FBUSxNQUFNLHFCQUFxQixZQUFZO0FBQUEsSUFDbkQ7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFNLFdBQVc7QUFuRXJCO0FBb0VRLGVBQUssaUJBQUwsbUJBQW1CO0FBQUEsRUFDdkI7QUFDSjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
